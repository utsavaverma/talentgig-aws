AWSTemplateFormatVersion: 2010-09-09
Description: Basic template that defines a single Amazon EC2 instance with a security group that allows SSH traffic on port 22 and HTTP traffic on port 80 on Linux Virtual Machine.
Parameters:
  awsExampleManagedPolicyParameterOne:
    Type: String
  awsExampleManagedPolicyParameterTwo:
    Type: String
Mappings:
  RegionMap:
    us-east-1:
     "AMI": "ami-0c02fb55956c7d316"
    us-west-2:
     "AMI": "ami-0c02fb55956c7d316"
Resources:
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      Tags:
        - Key: Name
          Value: Talent Gig VPC
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name
          Value: Talent Gig InternetGateway
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: TalentGig Public Subnet1
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: 10.0.2.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: TalentGig Public Subnet2
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs  '' ]
      CidrBlock: 10.0.11.0/24
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: TalentGig PrivateSubnet1
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: 10.0.12.0/24
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: TalentGig PrivateSubnet2
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: TalentGig Public Routes
  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1
  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2
  WebServerSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable HTTP from 0.0.0.0/0
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '3000'
          ToPort: '3000'
          CidrIp: 0.0.0.0/0

        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0

        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      VpcId: !Ref VPC

  TalentgigDynamoDBLoginTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: Login_users
        KeySchema:
          - AttributeName: email
            KeyType: HASH
        AttributeDefinitions:
          - AttributeName: email
            AttributeType: S
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5

  TalentgigDynamoDBRegistrationTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: Signup_users
        KeySchema:
          - AttributeName: email
            KeyType: HASH
        AttributeDefinitions:
          - AttributeName: email
            AttributeType: S
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5

  TalentgigDynamoDBPostsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: Post_user
        KeySchema:
          - AttributeName: email
            KeyType: HASH
        AttributeDefinitions:
          - AttributeName: email
            AttributeType: S
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5

  TalentgigDynamoDBProfileTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: Profile_user
        KeySchema:
          - AttributeName: email
            KeyType: HASH
        AttributeDefinitions:
          - AttributeName: email
            AttributeType: S
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
  TalentgigDynamoDBbattlesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: Battles_Registration
        KeySchema:
          - AttributeName: email
            KeyType: HASH
        AttributeDefinitions:
          - AttributeName: email
            AttributeType: S
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5

  MyS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: new_cloud_project_talengig
      AccessControl: PublicRead
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false

  S3BucketRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - s3.amazonaws.com
            Action:
              - 'sts:AssumeRole'

  S3BucketPolicies:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: S3BucketPolicy
      PolicyDocument:
        Statement:
          - Sid: PublicReadForGetBucketObjects
            Action:
              - s3:PutObject
              - s3:PutObjectAcl
              - s3:GetObject
              - s3:GetObjectAcl
            Effect: Allow
            Resource: !Join
              - ''
              - - 'arn:aws:s3:::'
                - !Ref MyS3Bucket
                - /*

      Roles:
        - !Ref S3BucketRole

  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", AMI]
      InstanceType: t2.micro
      SubnetId: !Ref PublicSubnet1
      IamInstanceProfile: !Ref DemoInstanceProfile
      KeyName : talentgigkeypair
      SecurityGroupIds:
        - !Ref WebServerSecurityGroup
      Tags:
       - Key: Name
         Value: TalentGig EC2
      UserData:
        Fn::Base64: !Sub |
            #!/bin/bash
            yum update -y
            yum install -y git
            mkdir /home/ec2-user/nilesh
            cd /home/ec2-user/nilesh
            git clone your_git_repo_URL
            yum install -y gcc-c++ make
            yum install curl -y
            curl -sL https://rpm.nodesource.com/setup_16.x | sudo -E bash -
            yum install -y nodejs
            npm install dotenv
            cd /home/ec2-user/nilesh/talentgig
            npm i
            node app.js

  DemoInstanceProfile:
      Type: AWS::IAM::InstanceProfile
      Properties:
        InstanceProfileName: demo-ec2-instance-profile
        Path: /
        Roles:
          - !Ref DemoEc2InstanceRole

  DemoEc2InstanceRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: demo-ec2-instance-role
        AssumeRolePolicyDocument:
          Version: 2012-10-17
          Statement:
            -
              Effect: Allow
              Principal:
                Service:
                  - ec2.amazonaws.com
              Action:
                  - sts:AssumeRole
        Path: /
        ManagedPolicyArns:
            - !Ref awsExampleManagedPolicyParameterOne
            - !Ref awsExampleManagedPolicyParameterTwo

Outputs:
  PublicIp:
    Description: EC2 Instance Public Ip
    Value: !GetAtt EC2Instance.PublicIp
